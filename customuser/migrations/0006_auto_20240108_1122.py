# Generated by Django 4.2.7 on 2024-01-08 10:22

from django.db import migrations
from django.contrib.auth.models import Group, Permission
from django.contrib.contenttypes.models import ContentType
from django.shortcuts import get_object_or_404
from customuser.models import CustomUser

def create_group(apps, schema_editor):
    administrateur_group, created = Group.objects.get_or_create(name="Administrateur")
    developpeur_group, created = Group.objects.get_or_create(name="DÃ©veloppeur")
    gestionnaire_rh_group, created = Group.objects.get_or_create(name="Gestionnaire RH")
    formateur_group, created = Group.objects.get_or_create(name="Formateur")
    chef_des_projets_group, created = Group.objects.get_or_create(name="Chef des projets")
    apprenant_group, created = Group.objects.get_or_create(name="Apprenant")

    content_type = ContentType.objects.get_for_model(CustomUser)
    user_permission = Permission.objects.filter(content_type=content_type)
    print([perm.codename for perm in user_permission])
    # => ['add_customuser', 'change_customuser', 'delete_customuser', 'view_customuser']
    for perm in user_permission:
        if perm.codename == "add_customuser":
            administrateur_group.permissions.add(perm)
            gestionnaire_rh_group.permissions.add(perm)
        elif perm.codename == "change_customuser":
            administrateur_group.permissions.add(perm)
            gestionnaire_rh_group.permissions.add(perm)
        elif perm.codename == "delete_customuser":
            administrateur_group.permissions.add(perm)
            gestionnaire_rh_group.permissions.add(perm)
        elif perm.codename == "view_customuser":
            administrateur_group.permissions.add(perm)
            developpeur_group.permissions.add(perm)
            gestionnaire_rh_group.permissions.add(perm)
            formateur_group.permissions.add(perm)
            chef_des_projets_group.permissions.add(perm)
            apprenant_group.permissions.add(perm)
    user = CustomUser.objects.get(username="admin")
    user.groups.add(administrateur_group)

class Migration(migrations.Migration):

    dependencies = [
        ('customuser', '0005_task_user'),
    ]

    operations = [
        migrations.RunPython(create_group),
    ]
